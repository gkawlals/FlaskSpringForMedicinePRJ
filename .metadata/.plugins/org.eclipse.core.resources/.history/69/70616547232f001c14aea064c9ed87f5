package poly.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import poly.dto.OcrDTO;
import poly.service.IMainService;
import poly.util.CmmUtil;
import poly.util.DateUtil;
import poly.util.FileUtil;
import poly.util.UrlUtil;


@Controller
public class MainController {
	
	final private String FILE_UPLOAD_SAVE_PATH = "/Users/hamjimin/upload/"; // C:\\upload 폴더에 저장
	//final private String FILE_UPLOAD_SAVE_PATH = "/data/image/"; // web배포 할때 사용할 경로
	private Logger log = Logger.getLogger(this.getClass());
	
	@RequestMapping(value="index")
	public String Index() {
		log.info(this.getClass());
		
		return "/index";
	}
	
	@Resource(name="MainService")
	private IMainService mainService;
	
	@RequestMapping(value="/AddMedicine.do")
	public String AddMedicine(HttpServletRequest request, HttpServletResponse response, ModelMap model,
			@RequestParam(value="fileUpload")MultipartFile mf) throws Exception{
		

		log.info(this.getClass().getName() + ".getReadforImageText start!");

		// OCR 실행 결과
		String res = "";

		// 업로드하는 실제 파일명
		// 다운로드 기능 구현시, 임의로 정의된 파일명을 원래대로 만들어주기 위한 목"/Users/hamjimin/Desktop/2021-08-02_21.39.48.png"적
		String originalFileName = mf.getOriginalFilename();

		// 파일 확장자 가져오기
		String ext = originalFileName.substring(originalFileName.lastIndexOf(".") + 1, originalFileName.length()).toLowerCase();
		
		String receive_dt = CmmUtil.nvl(request.getParameter("receive_dt"));
	
		// 이미지 파일만 실행되도록 함
		if (ext.equals("jpeg") || ext.equals("jpg") || ext.equals("gif") || ext.equals("png")) {
			
			// 웹서버에 저장되는 파일 이름
			// 업로드하는 파일 이름에 한글, 특수 문자들이 저장될 수 있기 때문에 강제로 영어와 숫자로 구성된 파일명으로 변경해서 저장한다.
			// 리눅스나 유닉스 등 운영체제는 다국어 지원에 취약하기 때문이다.
			String saveFileName = DateUtil.getDateTime("24hhmmss") + "." + ext;
			// 웹서버에 업로드한 파일 저장하는 물리적 경로
			String saveFilePath = FileUtil.mkdirForDate(FILE_UPLOAD_SAVE_PATH);
			// 파일 업로드를 위한 경로 잡아주기
			String fullFileInfo = saveFilePath + "/"+ saveFileName;
			
			// 정상적으로 값이 생성되었는지 로그 찍어서 확인
			log.info("saveFileName : " + saveFileName);
			log.info("saveFilePath : " + saveFilePath);
			log.info("fullFileInfo : " + fullFileInfo);

			// 업로드 되는 파일을 서버에 저장
			mf.transferTo(new File(fullFileInfo));

			OcrDTO pDTO = new OcrDTO();
			// word들을 담을 객체 
			pDTO.setUser_id("admin");
			pDTO.setFileName(saveFileName); // 저장되는 파일명
			pDTO.setFilePath(saveFilePath); // 저장되는 경로
			pDTO.setOrg_file_name(originalFileName);; // 원래이름
			pDTO.setReg_id("admin"); // user_id

			OcrDTO rDTO = mainService.AddMedicine(pDTO);

			if (rDTO == null) {
				rDTO = new OcrDTO();
			}
			
			List<OcrDTO> rList = mainService.getApiFlask(pDTO);
			
			res = CmmUtil.nvl(rDTO.getTextFromImage());

			rDTO = null;
			pDTO = null;
			
			}else {
				res = "이미지 파일이 아니라서 인식이 불가능합니다."; 
				
			}

		log.info(this.getClass().getName() + ".getReadforImageText end!");
	
		
		return null;
	}
	
	@RequestMapping(value="/AddMedicine")
	public String getApiFlask(ModelMap model,HttpServletRequest request, HttpServletResponse response, HttpSession session)
		throws Exception{
		
		UrlUtil uu = new UrlUtil();
		String url = "http://127.0.0.1:8001";
        String api = "/App2Test";
        String pName = "?Filename=";
        String Filename = CmmUtil.nvl(request.getParameter("fileUpload"));
		
        String res = uu.urlReadforString(url + api + pName + URLEncoder.encode(Filename,"UTF-8"));
        
        log.info("File Path : " + res);
        
        uu = null;
        
        // json parsing
        
        JSONParser parser = new JSONParser();
        
        JSONObject json = (JSONObject) parser.parse(res);
        
        List<String> rList = (List<String>)json.get("word");
        
        if(rList == null) {
        	rList = new ArrayList<String>();
        }
        
        Iterator<String> it = rList.iterator();
        
        while(it.hasNext()) {
        	String word = (String) it.next();
        	if(word.endsWith("주")) {
        		log.info("word : "+ word);
        		rList.add(word);
        	}else if (word.endsWith("정")){
        		log.info("word : "+ word);
        		rList.add(word);
        	}else if (word.endsWith("복)")){
        		log.info("word : "+ word);
        		rList.add(word);
        	}else if (word.endsWith("급여)")){
        		log.info("word : "+ word);
        		rList.add(word);
        	}else if (word.endsWith("비")){
        		log.info("word : "+ word);
        		rList.add(word);
        	}else if (word.endsWith("100")){
        		log.info("word : "+ word + "밀리그램");
        		rList.add(word);
        	}else if (word.endsWith("150")){
        		log.info("word : "+ word + "밀리그램");
        		rList.add(word);
        	}else if (word.endsWith("200")){
        		log.info("word : "+ word+ "밀리그램");
        		rList.add(word);
        	}else if (word.endsWith("250")){
        		log.info("word : "+ word + "밀리그램");
        		rList.add(word);
        	}
        	
        }
        
        log.info("Medicien List : " + rList);
        
        
		return null;
	}
}
